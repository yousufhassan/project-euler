using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

/*
Namespace: p12_highlyDivisbleTriangularNumber
Class: Project Euler
ClassName: Program
Description: The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

             1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

             Let us list the factors of the first seven triangle numbers:
             1: 1
             3: 1,3
             6: 1,2,3,6
             10: 1,2,5,10
             15: 1,3,5,15
             21: 1,3,7,21
             28: 1,2,4,7,14,28
             We can see that 28 is the first triangle number to have over five divisors.

             What is the value of the first triangle number to have over five hundred divisors?

Name: Yousuf Hassan
Date: Jun 29, 2020
Notes: From index 1000-8000, the program would execute efficiently, but after that, it became noticeably slower.
       The slowest part of the program was calculating the factors for each number, so I tried to optimize that part.
       I knew that, in general, even numbers have more factors than odd numbers, so I only calculted the factors for numbers that are
       divisible by 2. Then when the program was executing, I noticed a pattern that the numbers that had the most factors were divisble by 5.
       So, then I only calculated the factors for numbers that are divisble by 5. The program was still not as fast as I hoped, but
       these adjustments saved me from checking factors for numbers that I didn't need to. On average, 2/5 triangular numbers were divisble
       by 5. By making these adjustments, I made the program faster by 60%.
*/

namespace p12_highlyDivisbleTriangularNumber
{
    class Program
    {
        static void Main(string[] args)
        {
            bool cont = true;
            int highestFactor = 0;
            for (int i = 1000; cont; i++) // starting at 1000 because any number less than that could not have 500 factors
            {
                int triValue = GetTriangularValue(i);
                int factors = 0;

                if (triValue % 5 == 0) // I noticed a pattern where all the numbers with many factors were divisible by 5
                {
                    factors = NumberOfFactors(triValue);
                }

                if (factors > highestFactor)
                {
                    highestFactor = factors;
                }

                Console.Write("i = " + i + " ----- Value: " + triValue + " ----- " + factors + " factors");
                Console.WriteLine(" ----- The highest number of factors is currently " + highestFactor);
                if (factors > 500)
                {
                    Console.WriteLine(triValue + " is the answer!"); // the answer is at index 12375
                    cont = false;
                }
            }
        }

        // Method to get the nth triangular value, which is done by adding all the natural numbers up to it, including itself
        // Arguments: nth triangle number
        public static int GetTriangularValue(int nthNumber)
        {
            int triValue = 0;
            for (int i = 1; i <= nthNumber; i++)
            {
                triValue += i;
            }
            return triValue;
        }

        // Method to get the total number of factors
        // Arguments: triangular number
        public static int NumberOfFactors(int triValue)
        {
            int count = 1;
            for (int i = 1; i <= triValue / 2; i++)
            {
                if (triValue % i == 0)
                {
                    count++;
                }
            }

            return count;
        }
    }
}
